$date
	Mon Sep 30 23:17:32 2024
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module multiplier_tb $end
$var wire 1 ! cout $end
$var wire 8 " PRODUCT [7:0] $end
$var reg 4 # A [3:0] $end
$var reg 4 $ B [3:0] $end
$scope module uut $end
$var wire 4 % A [3:0] $end
$var wire 4 & B [3:0] $end
$var wire 8 ' PRODUCT [7:0] $end
$var wire 8 ( sum [7:0] $end
$var wire 8 ) result_sum [7:0] $end
$var wire 1 ! cout $end
$var wire 8 * carry [7:0] $end
$scope begin genblk1[0] $end
$upscope $end
$scope begin genblk1[1] $end
$upscope $end
$scope begin genblk1[2] $end
$upscope $end
$scope begin genblk1[3] $end
$upscope $end
$scope module csa $end
$var wire 8 + sum_stage [7:0] $end
$var wire 8 , sum [7:0] $end
$var wire 8 - carry_stage [7:0] $end
$var wire 8 . carry [7:0] $end
$var wire 8 / D [7:0] $end
$var wire 8 0 C [7:0] $end
$var wire 8 1 B [7:0] $end
$var wire 8 2 A [7:0] $end
$scope begin genblk1[0] $end
$scope module fa1 $end
$var wire 1 3 a $end
$var wire 1 4 b $end
$var wire 1 5 carry $end
$var wire 1 6 cin $end
$var wire 1 7 sum $end
$upscope $end
$scope module ha1 $end
$var wire 1 8 a $end
$var wire 1 9 b $end
$var wire 1 : cout $end
$var wire 1 ; sum $end
$upscope $end
$upscope $end
$scope begin genblk1[1] $end
$scope module fa1 $end
$var wire 1 < a $end
$var wire 1 = b $end
$var wire 1 > carry $end
$var wire 1 ? cin $end
$var wire 1 @ sum $end
$upscope $end
$scope module ha1 $end
$var wire 1 A a $end
$var wire 1 B b $end
$var wire 1 C cout $end
$var wire 1 D sum $end
$upscope $end
$upscope $end
$scope begin genblk1[2] $end
$scope module fa1 $end
$var wire 1 E a $end
$var wire 1 F b $end
$var wire 1 G carry $end
$var wire 1 H cin $end
$var wire 1 I sum $end
$upscope $end
$scope module ha1 $end
$var wire 1 J a $end
$var wire 1 K b $end
$var wire 1 L cout $end
$var wire 1 M sum $end
$upscope $end
$upscope $end
$scope begin genblk1[3] $end
$scope module fa1 $end
$var wire 1 N a $end
$var wire 1 O b $end
$var wire 1 P carry $end
$var wire 1 Q cin $end
$var wire 1 R sum $end
$upscope $end
$scope module ha1 $end
$var wire 1 S a $end
$var wire 1 T b $end
$var wire 1 U cout $end
$var wire 1 V sum $end
$upscope $end
$upscope $end
$scope begin genblk1[4] $end
$scope module fa1 $end
$var wire 1 W a $end
$var wire 1 X b $end
$var wire 1 Y carry $end
$var wire 1 Z cin $end
$var wire 1 [ sum $end
$upscope $end
$scope module ha1 $end
$var wire 1 \ a $end
$var wire 1 ] b $end
$var wire 1 ^ cout $end
$var wire 1 _ sum $end
$upscope $end
$upscope $end
$scope begin genblk1[5] $end
$scope module fa1 $end
$var wire 1 ` a $end
$var wire 1 a b $end
$var wire 1 b carry $end
$var wire 1 c cin $end
$var wire 1 d sum $end
$upscope $end
$scope module ha1 $end
$var wire 1 e a $end
$var wire 1 f b $end
$var wire 1 g cout $end
$var wire 1 h sum $end
$upscope $end
$upscope $end
$scope begin genblk1[6] $end
$scope module fa1 $end
$var wire 1 i a $end
$var wire 1 j b $end
$var wire 1 k carry $end
$var wire 1 l cin $end
$var wire 1 m sum $end
$upscope $end
$scope module ha1 $end
$var wire 1 n a $end
$var wire 1 o b $end
$var wire 1 p cout $end
$var wire 1 q sum $end
$upscope $end
$upscope $end
$scope begin genblk1[7] $end
$scope module fa1 $end
$var wire 1 r a $end
$var wire 1 s b $end
$var wire 1 t carry $end
$var wire 1 u cin $end
$var wire 1 v sum $end
$upscope $end
$scope module ha1 $end
$var wire 1 w a $end
$var wire 1 x b $end
$var wire 1 y cout $end
$var wire 1 z sum $end
$upscope $end
$upscope $end
$upscope $end
$scope module result $end
$var wire 8 { A [7:0] $end
$var wire 8 | B [7:0] $end
$var wire 8 } sum [7:0] $end
$var wire 1 ! cout $end
$var wire 8 ~ carry [7:0] $end
$scope begin adders[1] $end
$scope module FA $end
$var wire 1 !" a $end
$var wire 1 "" b $end
$var wire 1 #" carry $end
$var wire 1 $" cin $end
$var wire 1 %" sum $end
$upscope $end
$upscope $end
$scope begin adders[2] $end
$scope module FA $end
$var wire 1 &" a $end
$var wire 1 '" b $end
$var wire 1 (" carry $end
$var wire 1 )" cin $end
$var wire 1 *" sum $end
$upscope $end
$upscope $end
$scope begin adders[3] $end
$scope module FA $end
$var wire 1 +" a $end
$var wire 1 ," b $end
$var wire 1 -" carry $end
$var wire 1 ." cin $end
$var wire 1 /" sum $end
$upscope $end
$upscope $end
$scope begin adders[4] $end
$scope module FA $end
$var wire 1 0" a $end
$var wire 1 1" b $end
$var wire 1 2" carry $end
$var wire 1 3" cin $end
$var wire 1 4" sum $end
$upscope $end
$upscope $end
$scope begin adders[5] $end
$scope module FA $end
$var wire 1 5" a $end
$var wire 1 6" b $end
$var wire 1 7" carry $end
$var wire 1 8" cin $end
$var wire 1 9" sum $end
$upscope $end
$upscope $end
$scope begin adders[6] $end
$scope module FA $end
$var wire 1 :" a $end
$var wire 1 ;" b $end
$var wire 1 <" carry $end
$var wire 1 =" cin $end
$var wire 1 >" sum $end
$upscope $end
$upscope $end
$scope begin adders[7] $end
$scope module FA $end
$var wire 1 ?" a $end
$var wire 1 @" b $end
$var wire 1 A" carry $end
$var wire 1 B" cin $end
$var wire 1 C" sum $end
$upscope $end
$upscope $end
$scope module HA0 $end
$var wire 1 D" a $end
$var wire 1 E" b $end
$var wire 1 F" cout $end
$var wire 1 G" sum $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
0G"
0F"
0E"
0D"
0C"
0B"
0A"
0@"
0?"
0>"
0="
0<"
0;"
0:"
09"
08"
07"
06"
05"
04"
03"
02"
01"
00"
0/"
0."
0-"
0,"
0+"
0*"
0)"
0("
0'"
0&"
0%"
0$"
0#"
0""
0!"
b0 ~
b0 }
b0 |
b0 {
0z
0y
0x
0w
0v
0u
0t
0s
0r
0q
0p
0o
0n
0m
0l
0k
0j
0i
0h
0g
0f
0e
0d
0c
0b
0a
0`
0_
0^
0]
0\
0[
0Z
0Y
0X
0W
0V
0U
0T
0S
0R
0Q
0P
0O
0N
0M
0L
0K
0J
0I
0H
0G
0F
0E
0D
0C
0B
0A
0@
0?
0>
0=
0<
0;
0:
09
08
07
06
05
04
03
b0 2
b0 1
b0 0
b0 /
b0 .
b0 -
b0 ,
b0 +
b0 *
b0 )
b0 (
b0 '
b0 &
b0 %
b0 $
b0 #
b0 "
0!
$end
#10
1%"
1/"
1*"
b1111 "
b1111 '
b1111 )
b1111 }
1G"
1!"
1D"
1+"
1&"
1D
1;
1V
b1111 (
b1111 ,
b1111 {
1M
1A
18
1S
1J
1@
17
1R
b1111 +
1I
1Q
1H
1<
13
b1100 0
b11 2
b101 $
b101 &
b11 #
b11 %
#20
0%"
10"
0+"
1,"
0!"
1*"
1_
0V
1U
0D
1>"
19"
b1111101 "
b1111101 '
b1111101 )
b1111101 }
14"
0A
1>
1&"
1Y
0@
1:"
16"
01"
1M
b1010101 (
b1010101 ,
b1010101 {
1q
1g
b101000 *
b101000 .
b101000 |
0^
1S
1P
1J
b11110 -
1G
1e
0\
1X
1O
1F
1=
1o
1f
1]
1T
1R
1I
1d
b101101 +
0[
b11110 1
b1111000 /
1c
1Z
1N
1E
b111100 0
b1111 2
b1111 $
b1111 &
b1111 #
b1111 %
#30
0G"
1%"
0D"
0>"
0/"
0;
1!"
b110110 "
b110110 '
b110110 )
b110110 }
14"
08
0:"
0,"
1D
0P
07
0q
0U
1A
0>
0G
1\
b0 -
0Y
0S
15"
06"
10"
0o
0T
1@
1[
b110110 +
0R
1h
b0 *
b0 .
b0 |
0g
b110110 (
b110110 ,
b110110 {
1_
0N
03
0O
0F
0Z
0Q
0f
0]
0E
0<
b10010 1
b100100 0
b0 /
b0 2
b110 $
b110 &
b1001 #
b1001 %
#40
04"
09"
0/"
b110 "
b110 '
b110 )
b110 }
1*"
00"
0_
05"
0+"
1&"
0\
0h
0V
b110 (
b110 ,
b110 {
1M
0[
0e
0S
1J
0d
0R
b110 +
1I
1<
0X
1F
0=
0c
0Q
0H
b10 2
b100 1
b0 0
b11 $
b11 &
b10 #
b10 %
#50
0*"
b0 "
b0 '
b0 )
b0 }
0%"
0&"
0!"
0M
b0 (
b0 ,
b0 {
0D
0J
0A
0I
b0 +
0@
0F
0<
b0 1
b0 2
b1010 $
b1010 &
b0 #
b0 %
#60
1*"
1%"
1&"
1!"
1M
1D
09"
04"
b1110 "
b1110 '
b1110 )
b1110 }
1/"
1S
1J
1A
1R
1I
b1110 +
1@
05"
00"
1+"
0h
0_
b1110 (
b1110 ,
b1110 {
1V
1O
1F
1=
0f
0]
0T
b1110 1
b0 /
b10 $
b10 &
b111 #
b111 %
#70
